
function graph3D
x=-10:0.1:10;
y=-10:0.1:10;
[X,Y]=meshgrid(x,y);
%Z1=X.*Y./(X.^2+Y.^2);
Z2=(X.^3)+(Y.^3)-(X.*Y.*3);
surfl(X,Y,Z2)
end

/////////////////////////////////////


function anime
nrf=100;
M=moviein(nrf)
for i=1:nrf/2
    fimplicit(@(x,y) x.^3 + y.^3 - x.*y.*3 - (nrf/2-i)/100, [-2 2 -2 2])
    hold on
    M(: ,i) = getframe
end
for i=nrf/2:nrf
    fimplicit(@(x,y) x.^3 + y.^3 - x.*y.*3 + (i-nrf/2)/100, [-2 2 -2 2])
    M(:, i) = getframe
end
end


/////////////////////////////////////////


% да се начертае полето от прави на а) y' = x ^ 2 + y ^ 2
%                                   б) yy' = x\
% в квадрата К = [-5, 5] x [-5, 5]
%   В същия прозорец, да се начертае графиката на решението на зад. на Коши
%   за даденото у-ние с начална цел у(х0) = у0, където т.(х0, у0) се
%   въвежда с клик в/у К.
%
% у' = f(x, y)
%   Полето от прави е :
% { (x,y) от R^2 | y - y0 = f(x0, y0)*(x - x0), (x0, y0) е от D}
% представляват всички допирателни (?)
%
function Plotslope
    x= -5:0.3:5;
    y= -5:0.3:5;
    
    delta = 0.2; % ?
    hold on
    axis([-6 6 -6 6])
    grid on
    
    for k=1:length(x)
        for m=1:length(y)
            eps = delta / (sqrt(1 + ff(x(k), y(m)^2))); % за да е както трябва да е дълга отсечката
            plot([x(k) - eps, x(k) + eps], [y(m) - eps*ff(x(k), y(m)), y(m) + eps*ff(x(k), y(m))], 'k')
        end
    end
    
    % черате графиката като кликнеш
    while true
    [x0, y0] = ginput(1);
    plot(x0, y0, 'bo')
    
    [T, Y]=ode45(@ff, [x0, 5], y0)
    [T1, Y1]=ode45(@ff, [x0, -5], y0)
    plot(T, Y, 'b', T1, Y1, 'b')
    end
    function z=ff(x, y)
        %z = x^2 + y^2;
        z = x/y;
    end
end



%   y - y0 = f(x0, y0) (x - x0)
%   param:
%           x = x0 + t / (sqrt(1 + f^f(x0, y0)))
%           y = y0 - x0*f(x0, y0) - t*f(x0, y0) / (sqrt(1 + f^2(x0,y0)))
%
%



//////////////////////////////////////////////////////////



%   y' = f(x, y)    f: U -> R   U <= R^2
%   y(x0) = y0
%   J < R e интервал
%   g: J -> R е непрк. и диференцируема
%   Казваме, че g е eps приближено решение на задачата на Коши, ако:
%       (x, g(x)) е от U, за х от J
%       |g'(x) - f(x, g(x))| < eps , за х от J
%
%   Th. Ако f: U-> R e непркъсната ограничена функция в 
%       U = [a, b]x[y0 - r, y0 + r] и |f(x, y)| <= M върху U, то
%       за всяко х0 от [a, b], eps > 0, съществува eps приближено решение
%       на зад. на Коши в сечението на [a, b] с [x0 - r/M, x0 + r/M]
%
%   y = y0 + f(x0, y0)*(x - x0)         
%   g0(x) = y0 + f(x0, y0)*(x - x0)     x0 <= x <= x1
%   g0'(x) = f(x0, y0)
% |g0'(x) - f(x, g0(x))| = |f(x0, y0) - f(x, y0 + f(x0, y0)*(x - x0)| < eps
%   g1(x) = y1 + f(x1, y1)*(x - x1)     x1 <= x <= x2   и т. н.
%   ъъъ..
%
%   Задача: Да се реши символно задачата на Коши y' = -y*tg(x) + cos(2*x)
%                                                y(0) = 1
%       И да се начертае графиките на приближенията на решението получени
%       по метода на Ойлер със задедени стъпки h1 = 0.5, h2 = 0.2, h3 = 0.1
%

function EulersMethod % не баца нещо..
    x0 = 0;
    y0 = 1;
    xmax = 2;
    
    yy = dsolve('Dy=-y*tan(x)+cos(x^2','y(0)=1','x');
    s = x0:(xmax - x0)/100:xmax;
    z = subs(yy, 'x', s);
        
    plot(s, z, 'k');
    grid on;
    hold on;
    xlabel('x');
    ylabel('y');

    h = [0.5, 0.2, 0.1];
    x(1) = x0; 
    y(1) = y0;
    
    for k=1:length(h)
        x = x0:h(k):xmax;
        for j=1:length(h)-1
            y(j+1) = y(j) + h(k)*(cos(x(j))^2 - y(j)*tan(x(j)));
        end
        plot(x, y)
    end
end




//////////////////////////////////////////////////////////




%   y'(x) = f(x, y)
%   y(x0) = y0
%   yk(x) = y0 + S[x0, x](f(t, yk-1(t))dt   Метод на Пикар (за решаване /\)
%
%   Да се реши символно зад на Коши  y' = y, y(0) = 1
%       и да се начертае с червен цвят графиката на решението в [-4, 4]
%   Да се начертаят с черен цвят графиките на първите пет приближеня на
%       решението получено по метода на Пикар
%

function Pikar
    hold on
    grid on
    
    xmin = -4; xmax = 4;
    x0 = 0; y0 = 1;
    
    axis([xmin xmax -10 20]);
    y = dsolve('Dy=y', 'y(0)=1');
    t = xmin:(xmax-xmin)/100:xmax;
    
    plot(t, eval(y), 'r')
    xlabel('x'); ylabel('y');
    
    N = 50;
    x = x0:(xmin - x0)/100:xmin;
    xx = x0:(xmax-x)/100:xmax;
    
    y_0 = y0*ones(1, length(x));
    yy_0 = y0*ones(1, length(xx));
    
    z = y_0; zz = yy_0;
    for k=1:N
        y_k = y0 + cumtrapz(x, ff(x, z));%S[a,b](f(x))dx ~ Sum[k=1:n](f(xk) - f(xk-1))*(xk - xk-1)/<число> 
        yy_k = y0 + cumtrapz(xx, ff(xx, zz));% Метода на трапците (Числ. методи)
        plot(x, z, 'k', xx, zz, 'k')
        
        z = y_k; zz = yy_k;
    end
    
    function z=ff(x,y)
        z = y
    end
end


////////////////////////////////////////////////////////////



% Да се намерят обикновените и особените т-ки на у-нието:
%       а) (y')^2 -xy' + 5y - x^2 = 0
%       б) y = xy' +(y')^2
%   И да се начертае графиката на особеното му решение.
%   В същият прозорец с пазличен цвят, да се начертаят графиките на
%   особените решения, минаващи през обикновена точка (x0, y0), въведена
%   чрез клик в [-8, 8]x[-8, 8].
%   Ако (х0, у0) не е нито особена нито обикновена, да се изведе съобщение,
%   че през нея не минава особено решение.
%
%   (x0, y0) се нарича обикновена за F(x, y, y') , ако за всички z, за
%   които F(x0, y0, z) = 0, (dF/dz)(x0, y0, z) != 0 е изпълнено
%   Ако (dF/dz)(x0, y0, z) = 0 -> е особена
%
%   y = x*z + z^2 //diff
%   | dy = x*dz +z*dx + 2z*dz
%   | dy = zdx
%   => z*dx = x*dz + z*dx + 2z*dz -> x*dz + 2z*dz = 0
%   -> (x + 2z)*dz = 0 <=> dz = 0 && x + 2z = 0
%   <=> dz = 0 && x = -2z
%   => 1 сл. y = -2zz + z^2 -> y = -z^2  
%   => 2 сл. dz = 0 => z = c //const => y = cx + c^2
%


function Unsolved

% setup of screen
    axis([-10 10 -10 10])
    hold on
    grid on
%
    syms x y z
    %ff = z^2 + 5*y - x^2 - x*z; % a)
    ff = x*z + z^2 - y; % b)
    dff = diff(ff,z);
    
    [y, z] = solve(ff, dff, y, z)
    x = -10:1/100:10;
    yy = eval(y);
    
    plot(x, yy, 'k')
    
    while true
    [x0, y0] = ginput(1);
    plot(x0, y0, 'r*')
    if y0 < - (x0^2)/4
        text(x0 + 0.1, y0, 'mo solution')
    else
        %y1 = dsolve('(Dy)^2 - x*Dy - x^2 + 5*y = 0', 'y(x0) = y0', 'x') % a)
        y1 = dsolve('(Dy)^2 + x*Dy - y = 0', 'y(x0) = y0', 'x') % b)
        plot(x, eval(y1))
    end
    end
end

















