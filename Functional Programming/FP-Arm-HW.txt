зад.1. Нека е дадено неотрицателно цяло число n. Напишете функция (reduce n), която го "редуцира" до едноцифрено по следната процедура:
- намира най-голямата цифра в числото и я "премахва" от него (при повече от едно срещания премахва най-лявата такава цифра)
- умножава новополученото число по тази премахната цифра и, ако полученото число не е едноцифрено, повтаря процедурата наново за него.
Нека, например, n=26364. Най-голямата цифра е 6 и след премахване на първата шестица получаваме 2364. Умножаваме 2364*6=14184, 
което още не е едноцифрено, така че продължаваме от това число.
Примери:
(reduce 9) -> 9
(reduce 27) -> 4
(reduce 757) -> 5
(reduce 1234) -> 8
(reduce 26364) -> 8
(reduce 432969) -> 0
(reduce 1234584) -> 8
(reduce 91273716) -> 6


n = 123456  
pow10 = 10^3
d = n%pow10 --> 456 //left+c
d = d/(pow10/10) (int) --> 4

num-d = (n - left+c) / 10 + left+c % (pow10 / 10)
num-d = (+ (quotient n (/ pow10 10)) (remainder left+c (/ pow10 10)))
123456 - 456 = 123000 / 10 = 12300 + (456 % 100) = 12300 + 56 = 12356

pow10 = 1
d = n%pow10 --> 6
d = d/(pow10/10) --> 6 / (10 / 10) --> 6

pow10 = 6
d = n%pow10 --> 123456
d = d/(pow10/10) --> 123456 / (10^5) --> 1 

pow10 = 7
d = n%pow10 --> 123456
d = d/(pow10/10) --> 123456 / (10^6) --> 0 






Зад.2. Намерете броя на двуцифрените нечетни съставни числа, които не могат да се представят като сбор на някое просто число и два пъти по някой точен квадрат (напр. 39 не е такова число, т.к. може да се представи като 7 + 2*42).
:: !?
answer :: infinity

# n = 2k+1 :
    ! (p fr P & a fr N : n = p + 2* a*a)  &&
    n fr [10 , 99]

    ex: 39 ::  39 = 3 + 2* 
Sqr : 1 4 9 16 25 36  : k  
Prime : 2 3 5 7 11 13 17 19 23 29 31 37 : n

Iv: Brute force :: O (k*n*90)

IIv:
Shave Sqr to 2Sqr = {x fr Sqr | 2x is fr [10 , 99]}
    ans: 1 3 9 16 25 36 49 64 .. --> 2 6 18 50 72 88 :: 6
=> O (6 * n * 90) = O (n)


Зад.3. Напишете функция divisors, която по дадено естествено число генерира списък от двйки от всичките му прости делители и тяхната кратност (няма значение в какъв ред). Помнете, че 1 не е просто число, а и не се брои за делител.



Зад.4. Нека е даден списък от числа с дължина 2^n за някое естествено n. Напишете функция fenwick, която построява пълно балансирано двоично дърво с височина n такова, че:
- стойностите в листата са елементите от дадения списък, подредени в същия ред "отляво-надясно" в дървото
- стойността във всеки вътрешен възел е сумата от стойностите на двата му директни наследника. (тоест в корена ще е сумата от всички числа в списъка).
(fenwick '(1 3 5 -1 2 0 -4 3)) ->
          9
    8           1
 4     4     2    -1 
1 3   5 -1  2 0  -4 3




Зад.5. a) Напишете генератор на списъци с подадена дължина и случайни елементи.
b) Напишете функция, която проверява дали списък е сортиран.
c) Напишете няколко (поне 4) алгоритъма за сортиране на списъци и проверете кой е по-бърз (при експерименти с различни размери на списъка). Напишете кратък текст, който описва вашите тестове, наблюдаваните резултати и направете заключения.
Полезен линк: https://docs.racket-lang.org/heresy/random.html